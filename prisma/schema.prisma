// Schema Optimizado para Ouija Virtual API
// 5 tablas core con relaciones optimizadas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== SPIRITS ====================
// Personalidades de los espíritus disponibles
model Spirit {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  personality String   @db.VarChar(50) // wise, cryptic, dark, playful
  backstory   String   @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  sessions        OuijaSession[]
  multiplayerRooms MultiplayerRoom[]

  @@index([personality, isActive], name: "idx_spirits_personality_active")
  @@map("spirits")
}

// ==================== OUIJA SESSIONS ====================
// Sesiones individuales de chat con espíritus
model OuijaSession {
  id              Int      @id @default(autoincrement())
  sessionToken    String   @unique @default(uuid()) @map("session_token") @db.Uuid
  spiritId        Int      @map("spirit_id")
  status          String   @default("active") @db.VarChar(20) // active, ended
  userId          String?  @map("user_id") @db.VarChar(255) // Opcional para autenticación futura
  multiplayerRoomId Int?   @map("multiplayer_room_id") // FK a multiplayer_rooms
  createdAt       DateTime @default(now()) @map("created_at")
  endedAt         DateTime? @map("ended_at")

  // Relaciones
  spirit          Spirit           @relation(fields: [spiritId], references: [id], onDelete: Cascade)
  messages        SessionMessage[]
  multiplayerRoom MultiplayerRoom? @relation(fields: [multiplayerRoomId], references: [id], onDelete: SetNull)

  @@index([spiritId, status], name: "idx_sessions_spirit_status")
  @@index([multiplayerRoomId], name: "idx_sessions_multiplayer_room")
  @@map("ouija_sessions")
}

// ==================== SESSION MESSAGES ====================
// Mensajes intercambiados en sesiones
model SessionMessage {
  id        Int      @id @default(autoincrement())
  sessionId Int      @map("session_id")
  role      String   @db.VarChar(20) // user, spirit, system
  content   String   @db.Text
  username  String?  @db.VarChar(100) // Para multiplayer
  metadata  Json?    // Información adicional (timing, sentimiento, etc.)
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  session   OuijaSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId], name: "idx_messages_session")
  @@index([createdAt], name: "idx_messages_created")
  @@map("session_messages")
}

// ==================== MULTIPLAYER ROOMS ====================
// Salas multiplayer para sesiones compartidas
model MultiplayerRoom {
  id          Int      @id @default(autoincrement())
  roomCode    String   @unique @db.VarChar(8) // Código único de 8 caracteres
  spiritId    Int      @map("spirit_id")
  hostUserId  String?  @map("host_user_id") @db.VarChar(255)
  status      String   @default("active") @db.VarChar(20) // active, ended
  maxPlayers  Int      @default(10) @map("max_players")
  isPrivate   Boolean  @default(false) @map("is_private")
  createdAt   DateTime @default(now()) @map("created_at")
  endedAt     DateTime? @map("ended_at")

  // Relaciones
  spirit       Spirit            @relation(fields: [spiritId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]
  sessions     OuijaSession[]

  @@index([status, spiritId], name: "idx_rooms_status_spirit")
  @@index([roomCode], name: "idx_rooms_code")
  @@map("multiplayer_rooms")
}

// ==================== ROOM PARTICIPANTS ====================
// Participantes en salas multiplayer
model RoomParticipant {
  id         Int      @id @default(autoincrement())
  roomId     Int      @map("room_id")
  userId     String?  @map("user_id") @db.VarChar(255)
  username   String   @db.VarChar(100)
  socketId   String   @map("socket_id") @db.VarChar(255) // ID del socket de Socket.io
  isActive   Boolean  @default(true) @map("is_active")
  joinedAt   DateTime @default(now()) @map("joined_at")
  leftAt     DateTime? @map("left_at")

  // Relaciones
  room       MultiplayerRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, isActive], name: "idx_participants_room_active")
  @@index([socketId], name: "idx_participants_socket")
  @@map("room_participants")
}
