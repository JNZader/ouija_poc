version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ouija-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-ouija_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ouija_password}
      POSTGRES_DB: ${DB_NAME:-ouija_db}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ouija_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ouija-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ouija-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ouija-network

  # Ouija API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ouija-api-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000

      # Database
      DATABASE_URL: postgresql://${DB_USER:-ouija_user}:${DB_PASSWORD:-ouija_password}@postgres:5432/${DB_NAME:-ouija_db}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}

      # AI Services
      OLLAMA_HOST: ${OLLAMA_HOST:-http://host.docker.internal:11434}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:3001}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - ouija-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ouija-prometheus-dev
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ouija-network
    depends_on:
      - api

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ouija-grafana-dev
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - ouija-network
    depends_on:
      - prometheus

networks:
  ouija-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
